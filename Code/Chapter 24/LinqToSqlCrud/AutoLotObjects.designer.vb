'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="AutoLot")>  _
Partial Public Class AutoLotObjectsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCreditRisk(instance As CreditRisk)
    End Sub
  Partial Private Sub UpdateCreditRisk(instance As CreditRisk)
    End Sub
  Partial Private Sub DeleteCreditRisk(instance As CreditRisk)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertInventory(instance As Inventory)
    End Sub
  Partial Private Sub UpdateInventory(instance As Inventory)
    End Sub
  Partial Private Sub DeleteInventory(instance As Inventory)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.LinqToSqlCrud.My.MySettings.Default.AutoLotConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CreditRisks() As System.Data.Linq.Table(Of CreditRisk)
		Get
			Return Me.GetTable(Of CreditRisk)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Inventories() As System.Data.Linq.Table(Of Inventory)
		Get
			Return Me.GetTable(Of Inventory)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
  <FunctionAttribute(Name:="dbo.GetPetName")> _
  Public Function GetPetName( _
    <Parameter(DbType:="Int")> ByVal carID As System.Nullable(Of Integer), _
    <Parameter(DbType:="Char(10)")> ByRef petName As String) As Integer

    Dim result As IExecuteResult = _
      Me.ExecuteMethodCall(Me, _
                           CType(MethodInfo.GetCurrentMethod, MethodInfo), carID, petName)

    petName = CType(result.GetParameterValue(1), String)
    Return CType(result.ReturnValue, Integer)
  End Function
End Class

<Table(Name:="dbo.CreditRisks")>  _
Partial Public Class CreditRisk
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustID As Integer
	
	Private _FirstName As String
	
	Private _LastName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_CustID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustID() As Integer
		Get
			Return Me._CustID
		End Get
		Set
			If ((Me._CustID = value)  _
						= false) Then
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Customers")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustID As Integer
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Column(Storage:="_CustID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CustID() As Integer
		Get
			Return Me._CustID
		End Get
		Set
			If ((Me._CustID = value)  _
						= false) Then
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Customer_Order", Storage:="_Orders", OtherKey:="CustID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Table(Name:="dbo.Inventory")>  _
Partial Public Class Inventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CarID As Integer
	
	Private _Make As String
	
	Private _Color As String
	
	Private _PetName As String
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCarIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCarIDChanged()
    End Sub
    Partial Private Sub OnMakeChanging(value As String)
    End Sub
    Partial Private Sub OnMakeChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnPetNameChanging(value As String)
    End Sub
    Partial Private Sub OnPetNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Column(Storage:="_CarID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CarID() As Integer
		Get
			Return Me._CarID
		End Get
		Set
			If ((Me._CarID = value)  _
						= false) Then
				Me.OnCarIDChanging(value)
				Me.SendPropertyChanging
				Me._CarID = value
				Me.SendPropertyChanged("CarID")
				Me.OnCarIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Make", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Make() As String
		Get
			Return Me._Make
		End Get
		Set
			If (String.Equals(Me._Make, value) = false) Then
				Me.OnMakeChanging(value)
				Me.SendPropertyChanging
				Me._Make = value
				Me.SendPropertyChanged("Make")
				Me.OnMakeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Color", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Color() As String
		Get
			Return Me._Color
		End Get
		Set
			If (String.Equals(Me._Color, value) = false) Then
				Me.OnColorChanging(value)
				Me.SendPropertyChanging
				Me._Color = value
				Me.SendPropertyChanged("Color")
				Me.OnColorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PetName", DbType:="VarChar(50)")>  _
	Public Property PetName() As String
		Get
			Return Me._PetName
		End Get
		Set
			If (String.Equals(Me._PetName, value) = false) Then
				Me.OnPetNameChanging(value)
				Me.SendPropertyChanging
				Me._PetName = value
				Me.SendPropertyChanged("PetName")
				Me.OnPetNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Inventory_Order", Storage:="_Orders", OtherKey:="CarID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Inventory = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Inventory = Nothing
	End Sub
End Class

<Table(Name:="dbo.Orders")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderID As Integer
	
	Private _CustID As Integer
	
	Private _CarID As Integer
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Inventory As EntityRef(Of Inventory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnCustIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustIDChanged()
    End Sub
    Partial Private Sub OnCarIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCarIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Inventory = CType(Nothing, EntityRef(Of Inventory))
		OnCreated
	End Sub
	
	<Column(Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property OrderID() As Integer
		Get
			Return Me._OrderID
		End Get
		Set
			If ((Me._OrderID = value)  _
						= false) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CustID", DbType:="Int NOT NULL")>  _
	Public Property CustID() As Integer
		Get
			Return Me._CustID
		End Get
		Set
			If ((Me._CustID = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCustIDChanging(value)
				Me.SendPropertyChanging
				Me._CustID = value
				Me.SendPropertyChanged("CustID")
				Me.OnCustIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CarID", DbType:="Int NOT NULL")>  _
	Public Property CarID() As Integer
		Get
			Return Me._CarID
		End Get
		Set
			If ((Me._CarID = value)  _
						= false) Then
				If Me._Inventory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCarIDChanging(value)
				Me.SendPropertyChanging
				Me._CarID = value
				Me.SendPropertyChanged("CarID")
				Me.OnCarIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Customer_Order", Storage:="_Customer", ThisKey:="CustID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._CustID = value.CustID
				Else
					Me._CustID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Association(Name:="Inventory_Order", Storage:="_Inventory", ThisKey:="CarID", IsForeignKey:=true)>  _
	Public Property Inventory() As Inventory
		Get
			Return Me._Inventory.Entity
		End Get
		Set
			Dim previousValue As Inventory = Me._Inventory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Inventory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Inventory.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Inventory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._CarID = value.CarID
				Else
					Me._CarID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Inventory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
