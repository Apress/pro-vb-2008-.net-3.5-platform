'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace localhost
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MathServiceSoap", [Namespace]:="http://intertech.com/")>  _
    Partial Public Class MathService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubtractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MultiplyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DivideOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.WFMathClient.My.MySettings.Default.WFMathClient_localhost_MathService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddCompleted As AddCompletedEventHandler
        
        '''<remarks/>
        Public Event SubtractCompleted As SubtractCompletedEventHandler
        
        '''<remarks/>
        Public Event MultiplyCompleted As MultiplyCompletedEventHandler
        
        '''<remarks/>
        Public Event DivideCompleted As DivideCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://intertech.com/Add", RequestNamespace:="http://intertech.com/", ResponseNamespace:="http://intertech.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add(ByVal x As Integer, ByVal y As Integer) As Integer
            Dim results() As Object = Me.Invoke("Add", New Object() {x, y})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal x As Integer, ByVal y As Integer)
            Me.AddAsync(x, y, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal x As Integer, ByVal y As Integer, ByVal userState As Object)
            If (Me.AddOperationCompleted Is Nothing) Then
                Me.AddOperationCompleted = AddressOf Me.OnAddOperationCompleted
            End If
            Me.InvokeAsync("Add", New Object() {x, y}, Me.AddOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCompleted(Me, New AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://intertech.com/Subtract", RequestNamespace:="http://intertech.com/", ResponseNamespace:="http://intertech.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Subtract(ByVal x As Integer, ByVal y As Integer) As Integer
            Dim results() As Object = Me.Invoke("Subtract", New Object() {x, y})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubtractAsync(ByVal x As Integer, ByVal y As Integer)
            Me.SubtractAsync(x, y, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubtractAsync(ByVal x As Integer, ByVal y As Integer, ByVal userState As Object)
            If (Me.SubtractOperationCompleted Is Nothing) Then
                Me.SubtractOperationCompleted = AddressOf Me.OnSubtractOperationCompleted
            End If
            Me.InvokeAsync("Subtract", New Object() {x, y}, Me.SubtractOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubtractOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubtractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubtractCompleted(Me, New SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://intertech.com/Multiply", RequestNamespace:="http://intertech.com/", ResponseNamespace:="http://intertech.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Multiply(ByVal x As Integer, ByVal y As Integer) As Integer
            Dim results() As Object = Me.Invoke("Multiply", New Object() {x, y})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MultiplyAsync(ByVal x As Integer, ByVal y As Integer)
            Me.MultiplyAsync(x, y, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MultiplyAsync(ByVal x As Integer, ByVal y As Integer, ByVal userState As Object)
            If (Me.MultiplyOperationCompleted Is Nothing) Then
                Me.MultiplyOperationCompleted = AddressOf Me.OnMultiplyOperationCompleted
            End If
            Me.InvokeAsync("Multiply", New Object() {x, y}, Me.MultiplyOperationCompleted, userState)
        End Sub
        
        Private Sub OnMultiplyOperationCompleted(ByVal arg As Object)
            If (Not (Me.MultiplyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MultiplyCompleted(Me, New MultiplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://intertech.com/Divide", RequestNamespace:="http://intertech.com/", ResponseNamespace:="http://intertech.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Divide(ByVal x As Integer, ByVal y As Integer) As Integer
            Dim results() As Object = Me.Invoke("Divide", New Object() {x, y})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DivideAsync(ByVal x As Integer, ByVal y As Integer)
            Me.DivideAsync(x, y, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DivideAsync(ByVal x As Integer, ByVal y As Integer, ByVal userState As Object)
            If (Me.DivideOperationCompleted Is Nothing) Then
                Me.DivideOperationCompleted = AddressOf Me.OnDivideOperationCompleted
            End If
            Me.InvokeAsync("Divide", New Object() {x, y}, Me.DivideOperationCompleted, userState)
        End Sub
        
        Private Sub OnDivideOperationCompleted(ByVal arg As Object)
            If (Not (Me.DivideCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DivideCompleted(Me, New DivideCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub AddCompletedEventHandler(ByVal sender As Object, ByVal e As AddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub SubtractCompletedEventHandler(ByVal sender As Object, ByVal e As SubtractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubtractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub MultiplyCompletedEventHandler(ByVal sender As Object, ByVal e As MultiplyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MultiplyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub DivideCompletedEventHandler(ByVal sender As Object, ByVal e As DivideCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DivideCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
